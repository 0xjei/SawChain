/*
    Payload.
    Il payload contiene le informazioni che risultano fondamentali per la corretta esecuzione di una transazione.
    In Sawtooth una transazione è custom, cioè puù eseguire particolari azioni, le quali vengono validate dal TP.
    Il payload sono i dati che mi servono per eseguire, tramite una transazione, una data azione nella blockchain. 
    Ad esempio per registrare un Agente, un Prodotto o un Evento devo fornire determinati dati, devo fare una determinata action. 
    In base alla action, cambiano i dati che mi servono, quindi cambia il payload della transazione che indica di voler fare una 
    determinata action.
    Ad esempio se volessi creare una agente e nel payload non specificassi il nome, la transazione risulterebbe invalida.
    Tramite il TP è possibile validarla e gestire un insieme di livelli di permessi, valutando effettivamente, in base a chi firma la transazione
    chi può eseguire cosa, quando e perché.
*/
syntax = "proto3";

import "event.proto";
import "agent.proto";
import "batch.proto";
import "company.proto";
import "product.proto";
import "property.proto";

message ACPayload {

    // Azioni principali del sistema
    enum Action {
        CREATE_AGENT = 0;
        REVOKE_AGENT = 1;
        CREATE_COMPANY = 2;
        CREATE_FIELD = 3;
        RECORD_PRODUCT = 4;
        RECORD_HARVEST = 5;
        RECORD_TRASFORMATION = 6;
        CREATE_BATCH = 7;
        RECORD_GENERIC = 8;
        FINALIZE_BATCH = 9;
        RECORD_CERTIFICATION = 10;
        CREATE_PROPOSAL = 11;
        ANSWER_PROPOSAL = 12;
        UPDATE_PROPERTY = 13;
    }

    // Azione scelta
    Action action = 1;

    // Timestamp in cui avviene
    uint64 timestamp = 2;

    // Solo un campo verrà riempito, in base alla action scelta
    CreateAgentAction create_agent = 3;
    RevokeAgentAction revoke_agent = 4;
    CreateCompanyAction create_company = 5;
    CreateFieldAction create_field = 6;
    RecordProductAction record_product = 7;
    RecordHarvestAction record_harvest = 8;
    RecordTrasformationAction record_trasformation = 9;
    CreateBatchAction create_batch = 10;
    RecordGenericAction record_generic = 11;
    FinalizeBatchAction finalize_batch = 12;
    RecordCertificationAction record_certification = 13;
    CreateProposalAction create_proposal = 14;
    AnswerProposalAction answer_proposal = 15;
    UpdatePropertyAction update_property = 16;

}

/*
    La creazione di un Agente, sia esso Business Admin, Operator, Certifier, consiste nella registrazione on chain e nel rilascio di una
    coppia di chiavi pubblica privata. La chiave pubblica verrà associata a tali dati, identificando univocamente l'agente nel sistema.
    La privata verrà salvata off-chain. Per la corretta creazione di un'Agente è necessario specificare il suo nome,
    un id che lo identifica univocamente esternamente alla blockchain (in caso di problemi, è possibile risalire alla sua identità reale),
    e la sua tipologia.

    Informazioni implicite:
    - authorizer
    - company (per alcuni come Certifier non è specificata, per altri come Operator si. E' possibile recuperarla dal Business Admin.
                fintanto che non viene registrata la company è un campo vuoto)
    - enabled = true (appena registrato è abilitato)

    La transazione dev'essere validata a livello di Smart Contract per gestire la "gerarchia" dell'azione in base alla tipologia 
    del signer che vuole abilitare un altro agente. Es. un Operator registrato nel sistema, non può abilitare nessun tipo di agente nel sistema.

    La transazione fallisce se accade una delle seguenti condizioni:
    - Se l'AgentType è Business Admin:
        - Il signer non è un System Admin registrato nel sistema
        - Esiste un agente con la stessa chiave pubblica
    - Se l'agentType è Certifier:
        - Il signer non è un System Admin registrato nel sistema
        - Esiste un agente con la stessa chiave pubblica
    - Se l'agentType è Operator:
        - Il signer non è un Business Admin registrato nel sistema
        - Il Business Admin non è abilitato
        - Il Business Admin non ha ancora registrato la sua Company nel sistema
        - Esiste già nel sistema un Operator con lo stesso id univoco
        - Esiste un agente con la stessa chiave pubblica
    - Se l'agentType non è uno dei tre tipi specificati
    - Uno dei campi richiesti è una stringa vuota

    NB
    I controlli sull'id di Business Admin e Certifier non ha senso visto che gli aggiunge un system admin e sono un codice fiscale praticamente
    mentre sull'operator ha senso per evitare che il business admin aggiunga lo stesso operatore due volte 

    NB
    Username, password e chiave privata sono salvate e gestite off-chain
*/

message CreateAgentAction {

    // Nome agente
    string name = 1;
    
    // Identificativo univoco (all'interno dell'azienda o del mondo esterno)
    // esempio per un Certifier può essere il codice fiscale, per un Operatore un id con cui è
    // riconosciuto all'interno dell'azienda
    string id = 2;

    // Tipologia Agente
    Agent.AgentType type = 3;

    // Chiave pubblica dell'agente
    string public_key = 4;
}

/*
    Tale azione permette, specificato un Agente, di rimuovere l'autorizzazione ad effettuare operazioni in scrittura sulla blockchain.
    Tale revoca, può essere eseguita solo ed esclusivamente sugli agenti che il signer ha abilitato sul ledger.

    Impliciti:
    - enabled = False

    La transazione fallisce se accade una delle seguenti condizioni:
    - il signer è un agente non più abilitato
    - Se l'agentType corrispondente è System Admin
    - Il campo agent_pk è una stringa vuota
    - Se il signer è un Certifier o un Operator
    - Se voglio revocare un Business Admin:
        - Il signer non è un System Admin registrato nel sistema
        - Non esiste un Business Admin con la chiave pubblica specificata
        - Esiste ma è già stato revocato
    - Se voglio revocare un Certifier:
        - Il signer non è un System Admin registrato nel sistema
        - Non esiste un Certifier con la chiave pubblica specificata
        - Esiste ma è già stato revocato
    - Se voglio revocare un Operator:
        - Il signer non è un Business Admin registrato nel sistema
        - Il Business Admin non ha ancora registrato la sua Company nel sistema
        - Non esiste un Operator con la chiave pubblica specificata
        - Esiste ma è già stato revocato

*/
message RevokeAgentAction {

    // Chiave pubblica dell'agente da revocare
    string agent_pk = 1;

    // Tipologia agente da revocare
    Agent.AgentType type = 2;
}

/*
    Una volta abilitato a scrivere nel sistema, un Business Admin può registrare i dati significativi della sua Company.
    Tale iscrizione è necessaria prima di aggiungere un qualsiasi Operator, in maniera tale che sia possibile specificare, per la company
    informazioni quali: identificativo univoco (cf aziendale), un nome, altre informazioni rilevanti e i ruoli che avrà nella supply chain
    (es. produzione e processing oppure distribuzione, ecc.)

    Impliciti:
    - adm_pk (signer)
    - operators = null
    - fields = null

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Business Admin registrato nel sistema
    - Il signer è un BusinessAdmin non più abilitato
    - Il company_fc è vuoto
    - Il name è vuoto
    - Le Info sono vuote
    - Dev'essere specificato almeno un ruolo
    - Esiste già un azienda con quel company_fc nel sistema

    NB. Setta la company nell'indirizzo dello state del business admin

*/

message CreateCompanyAction {

    // Codice Fiscale aziendale (univoco)
    string company_fc = 1;

    // Nome
    string name = 2;

    // Informazioni significative
    Company.Info info = 3;

    // Ruoli della Company all'interno della supply chain
    repeated Company.Role roles = 4;

}

/*
    Un Business Admin è abilitato ad aggiungere dei campi (Fields) alla sua company se, tra i ruoli di essa, troviamo 
    quello di Production.

    Impliciti:
    - adm_pk (signer)
    - company_fc (from signer address)

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Business Admin registrato nel sistema
    - Il signer è un BusinessAdmin non più abilitato
    - La company non è associata al business admin
    - Il field è vuoto (descrizione)
    - Esiste già un field con quell'id all'interno della company
*/
message CreateFieldAction {

    // Field info
    Company.Field field = 1;

}

/*
    Dopo aver aggiunto la sua azienda nel sistema, un Business Admin è abilitato a registrare nel sistema i Products che la sua azienda
    produce. Deve fornire il nome (univoco nell'azienda) del prodotto, l'azienda, info significative, il tipo del prodotto.
    Se il prodotto è di primo raccolto (Harvested), deve specificare anche il Field dove esso viene raccolto.

    Impliciti:
    - company
    - timestamp
    
    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Business Admin
    - Il signer è un Business Admin non più abilitato
    - Il Business Admin non ha ancora registrato una company
    - Il nome del prodotto è già presente nella company
    - Se Harvested:
        - non ha ancora aggiunto i campi alla company
        - Inserisce un id field inesistente
    - Se Processed o Final: (non serve specificare un nome, lo mette nella descrizione da cosa deriva.. altrimenti deriverebbe da un
                             prodotto che viene fatto da una specifica azienda e basta.. Dovrei mettere una lista di diversi prodotti
                             di diverse aziende ma risulterebbe complicato perche dovrebbe indicare anche le aziende, lasciamo cosi per ora)
    - Un qualsiasi campo è vuoto
    - Specifica Harvested per un azienda senza Role Harvested
    - Specifica Processed o Final per un azienda senza Role Processor

*/
message RecordProductAction {

    // Nome univoco del prodotto
    string name = 1;

    // Descrizione più o meno complessa
    Product.Info info = 2;

    // Tipologia del prodotto (condiziona gli eventi su esso e i lotti)
    // Esempio se un lotto è di un prodotto finale non può essere più trasformato
    Product.ProductType type = 3;

    // valorizzato solo se type = harvested
    string id_field = 4;
}

/*
    Un Operator appartenente ad un'azienda con Role Producer, è abilitato a registrare un evento di Harvesting nella Company.
    Deve specificare l'id univoco dell'evento, delle info significative, timestamp e le informazioni dell'Harvested.

    Impliciti:
    - type = Harvest
    - timestamp
    - reporter (signer)

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - Il signer non appartiene ad una Company con Role Producer
    - l'event_id è già presente nella company
    - uno dei campi è vuoto
    - specifica un product che non esiste nella company per la quale lavora l'Operator

*/
message RecordHarvestAction {

    // Id univoco evento
    string event_id = 1;

    // Info significative
    Event.Info info = 2;

    // Info sul raccolto
    HarvestedInfo harvested = 3;

}

/*
    Un Operator appartenente ad un'azienda con Role Processing, è abilitato a registrare un evento di Trasformation nella Company.
    Deve specificare l'id univoco dell'evento, delle info significative, timestamp e le informazioni della trasformation.

    Impliciti:
    - type = Trasformation
    - timestamp
    - reporter (signer)

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - Il signer non appartiene ad una Company con Role Processing
    - l'event_id è già presente nella company
    - uno dei campi è vuoto
    - specifica un out_product che non esiste nella company per la quale lavora l'Operator
    - specifica una lista di Batch di prodotto di input che non è in possesso nella company per la quale lavora l'Operator
*/
message RecordTrasformationAction {

    // Id univoco evento
    string event_id = 1;

    // Info significative
    Event.Info info = 2;

    // Info sulla trasformazione
    TrasformationInfo trasformation = 3;
}

/*
    Un Operator di una company di Production o Processing è abilitato alla creazione di un lotto (Batch) di produzione.
    La creazione è abilitata successivamente ad un Harvest o una Trasformation accadute nella company.
    Se non specifica temperature o location a true, non viene creato l'address specifico per la registrazione delle informazioni
    riguardo gli spostamenti di locazione e temperatura del batch. Di default, essi stanno a false.

    Implicite:
    - reporters (signer) (chi ha creato il batch è il primo, gli altri son quelli che ci hanno interagito dopo)
    - companies (from signer) (la prima è quella di creazione)
    - end = false
    - timestamp

    Default:
    - temperature = false
    - location = false

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - Il signer non appartiene ad una Company con Role Processing o Production
    - uno dei campi è vuoto
    - Il batch id è già presente nella company
    - il nome del product specificato non è presente nella company

    NB.
    Tale azione crea anche l'address con le property da registrare per il batch se temperature e/o location true.
*/
message CreateBatchAction {
    
    // Id batch
    string batch_id = 1;

    // nome prodotto (univoco)
    string product = 2;

    // Informazioni sul batch (grandezza, numero oggetti, ecc.)
    Batch.Info info = 3;

    // Evento a cui fa riferimento
    string event_id = 4;

    // Temperature
    bool temperature = 5;

    // Location
    bool location = 6;

}

/*
    Un Operator è abilitato a registrare un event generico all'interno dell'azienda o per un batch dell'azienda presso la quale lavora.
    Deve specificare l'id dell'evento e le info.

    Implicite:
    - type = GENERIC
    - reporter (signer)
    - company (from signer)
    - timestamp
    - operators (batch)

    Default:
    - harvested = certification = trasformation = null

    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - uno dei campi è vuoto
    - l'event_id è già presente nella company
    - specifica un batch inesistente in quella company

*/
message RecordGenericAction {
    // Id evento
    string id = 1;

    // Informazioni significative
    Event.Info infos = 2;

    // id batch
    GenericInfo generic = 3;

}

/*
    Un Operator è abilitato alla finalizzazione di un batch in possesso della sua azienda di Retailing, causa messa in vendita
    oppure se di Processing causa finite le scorte da quel batch

    Implicite:
    - company (signer)
    - end = true
    - operators (signer) (sarà l'ultimo ad interagire)

    La transazione fallisce se accade una delle seguenti condizioni:
    - il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - la company non ha un role Processing o retailing
    - l'id non appartiene a nessun batch della company
    - il batch è già finalizzato

*/
message FinalizeBatchAction {
    // Id batch
    string batch_id = 1;
}

/*
    Un Certifier può registrare un Event di certificazione per un dato batch o un processo di una company.
    Devo fornire l'id, la company e/o il batch, informazioni utili e info sulla certificazione.

    Implicite:
    - type = CERTIFICATION
    - reporter (signer)
    - timestamp
    - harvested = trasformation = null

    La transazione fallisce se accade una delle seguenti condizioni:
    - il signer non è un Certifier
    - il signer è un Certifier ma non è più abilitato
    - il campo company non rappresenta un azienda registrata
    - il batch non appartiene all'azienda indicata
    - il tipo della certificazione non appartiene ai tipi prestabiliti
    - l'event_id è vuoto
    - company è vuoto
    - l'event_id è già presente nella company
*/
message RecordCertificationAction {
    // Id evento
    string event_id = 1;

    // Informazioni certificazione
    CertificationInfo info = 2;
}    


/*
    Azione che abilita un Operator ad inviare una richiesta per il passaggio di un Batch dalla sua Company ad un'altra.
    Specifica l'id del batch, la company ricevente e i termini del passaggio.

    Implicite:
    - timestamp
    - issuing_company (signer)
    - status = OPEN
    
    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - lascia vuoto uno dei campi (tranne terms)
    - Specifica un Batch che non appartiene alla sua azienda
    - Specifica un azienda che non esiste come azienda ricevente

    NB
    se ok
    Devo aggiungere alla lista degli operators del batch il signer perché ci sta interagendo
*/
message CreateProposalAction {

    // Id univoco batch
    string batch_id = 1;

    // Company che riceve
    string receiving_company = 2;

    // Termini
    string terms = 3;
}

/*
    Un Operatore può rispondere ad una richiesta di passaggio di un batch da parte di un azienda emittente.
    Deve specificare l'id del batch, la risposta e i termini della risposta

    Implicite:
    - timestamp
    - receiving_company
    
    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator della company ricevente
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - Lo status della proposta non è OPEN
    - Specifica un batch_id che non esiste
    - Specifica una response che non ha valore accept, reject o cancel

    NB
    Per ricostruire l'indirizzo le prende tutte senza specificare il timestamp son tutte proposte e dentro capisci se sono valide o meno

*/
message AnswerProposalAction {

    // Possibili risposte
    enum Response {
        ACCEPT = 0;
        REJECT = 1;
        CANCEL = 2;
    }

    // Id batch oggetto di proposta
    string batch_id = 1;

    // risposta alla richiesta
    Response response = 2;

    // Termini risposta
    string terms = 3;
    
}

/*
    Un Operator (solitamente non umano, sensore) è abilitato a registrazione la locazione o la temperatura per un particolare batch. 
    (Altre property possono essere definite in base alla soluzione o requisiti).

    Deve specificare l'id del batch, il tipo della property e il valore riportato.

    Per eseguire quest'azione, viene letta prima la pagina Property e poi registrato il valore nella PropertyPage corrente

    Implicite:
    - current_page (property)
    - wrapped (property)
  
    La transazione fallisce se accade una delle seguenti condizioni:
    - Il signer non è un Operator
    - Il signer è un Operator non più abilitato
    - La company appartiene ad un Business Admin non più abilitato
    - Specifica un batch_id che non esiste
    - Specifica un type che non è location o temperature
    - Specifica type temperature ma nel reportedValue lascia temperature vuoto
    - Specifica type location ma nel reportedValue lascia location vuoto
    - uno dei campi è vuoto
    
*/
message UpdatePropertyAction {
    // Tipo della property
    Property.PropertyType type = 1;

    // Batch id
    string batch_id = 2;

    // ReportedValues are sorted first by timestamp
    PropertyPage.ReportedValue reported_values = 3;
}
syntax = "proto3";

package sawchain;

import "types.proto";
import "entities.proto";

message SCPayload {
    enum Action {
        CREATE_SYSADMIN = 0;
        UPDATE_SYSADMIN = 1;
        CREATE_TASK_TYPE = 2;
        CREATE_PRODUCT_TYPE = 3;
        CREATE_EVENT_PARAMETER_TYPE = 4;
        CREATE_EVENT_TYPE = 5;
        CREATE_CERTIFICATION_AUTHORITY = 6;
        CREATE_COMPANY = 7;
        CREATE_FIELD = 8;
        CREATE_OPERATOR = 9;
        CREATE_DESCRIPTION_EVENT = 10;
        CREATE_TRANSFORMATION_EVENT = 11;
    }

    Action action = 1;

    // Approximately when transaction was submitted, as a Unix UTC timestamp
    uint64 timestamp = 2;

    UpdateSystemAdminAction updateSysAdmin = 3;
    CreateTaskTypeAction createTaskType = 4;
    CreateProductTypeAction createProductType = 5;
    CreateEventParameterTypeAction createEventParameterType = 6;
    CreateEventTypeAction createEventType = 7;
    CreateCertificationAuthorityAction createCertificationAuthority = 8;
    CreateCompanyAction createCompany = 9;
    CreateFieldAction createField = 10;
    CreateOperatorAction createOperator = 11;
    CreateDescriptionEvent createDescriptionEvent = 12;
    CreateTransformationEvent createTransformationEvent = 13;
}

message UpdateSystemAdminAction {
    // New System Admin's public key.
    string publicKey = 1;
}

message CreateTaskTypeAction {
    // Task Type unique identifier.
    string id = 1;

    // Task name.
    string role = 2;
}

message CreateProductTypeAction {
    // Product Type unique identifier.
    string id = 1;

    // Product Type name.
    string name = 2;

    // Product Type description.
    string description = 3;

    // Product Type unit of measure.
    ProductType.UnitOfMeasure measure = 4;

    // List of derived product types.
    repeated ProductType.DerivedProduct derivedProducts = 5;
}

message CreateEventParameterTypeAction {
    // Event Parameter Type unique identifier.
    string id = 1;

    // Event Parameter Type name.
    string name = 2;

    // Event Parameter Type information type.
    EventParameterType.Type type = 3;
}

message CreateEventTypeAction {
    // Event Type unique identifier.
    string id = 1;

    // Event Type typology (description/transformation).
    EventType.EventTypology typology = 2;

    // Event Type name.
    string name = 3;

    // Event Type description.
    string description = 4;

    // List of EventParameters.
    repeated EventType.EventParameter parameters = 5;

    // List of authorized Task Types.
    repeated string enabledTaskTypes = 6;

    // List of enabled Product Types.
    repeated string enabledProductTypes = 7;

    // List of derived Product Types (for transformations typology only)
    repeated string derivedProductTypes = 8;
}

message CreateCertificationAuthorityAction {
    // CertificationAuthority public key.
    string publicKey = 1;

    // CertificationAuthority name.
    string name = 2;

    // CertificationAuthority website.
    string website = 3;

    // List of enabled Product Types for certification.
    repeated string products = 4;
}

message CreateCompanyAction {
    // Company name.
    string name = 1;

    // Company description.
    string description = 2;

    // Company website.
    string website = 3;

    // Company Admin public key.
    string admin = 4;
}

message CreateFieldAction {
    // Field unique identifier.
    string id = 1;

    // Field description.
    string description = 2;

    // Field cultivated product.
    string product = 3;

    // Field predicted production quantity.
    float quantity = 4;

    // Field location.
    Location location = 5;
}

message CreateOperatorAction {
    // Operator public key.
    string publicKey = 1;

    // Operator task.
    string task = 2;
}

message CreateDescriptionEvent {
    // Event Type identifier.
    string eventTypeId = 1;

    // Company Batch for event recording.
    string batch = 2;

    // Company Field for event recording.
    string field = 3;

    // Unique identifiers and values of necessary EventParameterValues.
    repeated Event.EventParameterValue values = 4;
}

message CreateTransformationEvent {
    // Event Type identifier.
    string eventTypeId = 1;

    // A list of Company Batches to transform.
    repeated string batches = 2;

    // A list of Company Fields to transform.
    repeated string fields = 3;

    // An ordered list of quantities to subtract from input resources (Batch/Field).
    repeated float quantities = 4;

    // Output Batch Product Type.
    string derivedProduct = 5;

    // Output Batch identifier.
    string outputBatchId = 6;
}